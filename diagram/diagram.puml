@startuml

abstract class User {
    .. Attributes ..
    -{static} MIN_NAME_LENGTH : final int
    -{static} MAX_NAME_LENGTH : final int
    -{static} MAX_EMAIL_LENGTH : final int
    -{static} MIN_ADDRESS_LENGTH : final int
    -{static} MAX_ADDRESS_LENGTH : final int
    -{static} MIN_HEART_RATE : final int
    -{static} MAX_HEART_RATE : final int
    -{static} MIN_WEIGHT : final int
    -{static} MAX_WEIGHT : final int
    -{static} MIN_HEIGHT : final int
    -{static} MAX_HEIGHT : final int
    -id : int
    -name : String
    -email : String
    -address : String
    -heartRate : int
    -weight : int
    -height : int
    -activities : ArrayList<Activity>
    -registers : HashMap<LocalDateTime, Activity>
    -plan : Plan
    .. Constructors ..
    +User()
    +User(id : int, name : String, email : String,
        address : String, heartRate : int, weight : int,
        height : int)
    +User(id : int, name : String, email : String,
        address : String, heartRate : int, weight : int,
        height : int, activities : ArrayList<Activity>,
        registers : HashMap<LocalDateTime, Activity>,
        plan : Plan)
    +User(user : User)
    .. Getters ..
    +getId() : int
    +getName() : String
    +getEmail() : String
    +getAddress() : String
    +getHeartRate() : int
    +getWeight() : int
    +getHeight() : int
    +getActivities() : ArrayList<Activity>
    +getRegisters() : HashMap<LocalDateTime, Activity>
    +getPlan() : Plan
    +{abstract} getCaloriesMultiplier() : int
    .. Setters ..
    +setId(id : int) : void
    +setName(name : String) : void
    +setEmail(email : String) : void
    +setAddress(address : String) : void
    +setHeartRate(heartRate : int) : void
    +setWeight(weight : int) : void
    +setHeight(height : int) : void
    +setActivities(activities : ArrayList<Activity>) : void
    +setRegisters(registers : HashMap<LocalDateTime, Activity>) : void
    +setPlan(plan : Plan) : void
    .. Other methods ..
    +toString() : String
    +equals(o : Object) : boolean
    +{abstract} clone() : User
    .. Activities methods ..
    +addActivity(activity : Activity) : void
    +deleteActivity(activity : Activity) : void
    .. Registers methods ..
    +register(date : LocalDateTime, register : Activity) : void
}

package users {
    class Occasional extends User {
        .. Attributes ..
        -caloriesMultiplier : final int
        .. Constructors ..
        +Occasional()
        +Occasional(id : int, name : String, email : String,
            address : String, heartRate : int, weight : int,
            height : int)
        +Occasional(Occasional u)
        .. Methods ..
        +clone() : User
        +getCaloriesMultiplier() : int
    }

    class Amateur extends User {
        .. Attributes ..
        -caloriesMultiplier : final int
        .. Constructors ..
        +Amateur()
        +Amateur(id : int, name : String, email : String,
            address : String, heartRate : int, weight : int,
            height : int)
        +Amateur(Amateur u)
        .. Methods ..
        +clone() : User
        +getCaloriesMultiplier() : int
    }

    class Professional extends User {
        .. Attributes ..
        -caloriesMultiplier : final int
        .. Constructors ..
        +Professional()
        +Professional(id : int, name : String, email : String,
            address : String, heartRate : int, weight : int,
            height : int)
        +Professional(Professional u)
        .. Methods ..
        +clone() : User
        +getCaloriesMultiplier() : int
    }
}

abstract class Activity {
    .. Attributes ..
    -name : String
    -duration : int
    -intensity : int
    -hard : boolean
    -calories : int
    .. Constructors ..
    +Activity()
    +Activity(name : String, duration : int, intensity : int,
        hard : boolean, calories : int)
    +Activity(activity : Activity)
    .. Getters ..
    +getName() : String
    +getDuration() : int
    +getIntensity() : int
    +getHard() : boolean
    +getCalories() : int
    .. Setters ..
    +setName(name : String) : void
    +setDuration(duration : int) : void
    +setIntensity(intensity : int) : void
    +setHard(hard : boolean) : void
    +setCalories(calories : int) : void
    .. Others methods (abstract) ..
    +{abstract} toString() : String
    +{abstract} equals(o : Object) : boolean
    +{abstract} clone() : Activity
    +{abstract} calculateCalories(u : User) : int
    +{abstract} getDistance() : int
    +{abstract} getAltimetry() : int
    +{abstract} isDistanceBased() : boolean
    +{abstract} isAltimetryBased() : boolean
    +{abstract} getAttributes() : ArrayList<String>
    +{abstract} setAttributes(attributes : ArrayList<Integer>) : void
}

package activities {
    class Swimming extends Activity {
        ..Attributes..
        -{static} MET_VALUE : final double
        -distance : int
        .. Constructors ..
        +Swimming()
        +Swimming(name : String, duration : int, intensity : int,
            hard : boolean, calories : int)
        +Swimming(name : String, duration : int, intensity : int,
        hard : boolean, calories : int, distance : int)
        +Swimming(name : String, duration : int, intensity : int,
            hard : boolean, calories : int, attributes : ArrayList<Integer>)
        +Swimming(distance : Swimming)
        .. Getters ..
        +getDistance() : int
        +getAltimetry() : int
        .. Setters ..
        +setDistance(distance : int) : void
        .. Others methods ..
        +toString() : String
        +equals(o : Object) : boolean
        +clone() : Activity
        +calculateCalories(u : User) : int
        +isDistanceBased() : boolean
        +isAltimetryBased() : boolean
        +getAttributes() : ArrayList<String>
        +setAttributes(attributes : ArrayList<Integer>) : void        
    }
    class Treadmill extends Activity {
        ..Attributes..
        -{static} MET_VALUE : final double
        -distance : int
        .. Constructors ..
        +Treadmill()
        +Treadmill(name : String, duration : int, intensity : int,
            hard : boolean, calories : int)
        +Treadmill(name : String, duration : int, intensity : int,
        hard : boolean, calories : int, distance : int)
        +Treadmill(name : String, duration : int, intensity : int,
            hard : boolean, calories : int, attributes : ArrayList<Integer>)
        +Treadmill(distance : Treadmill)
        .. Getters ..
        +getDistance() : int
        +getAltimetry() : int
        .. Setters ..
        +setDistance(distance : int) : void
        .. Others methods ..
        +toString() : String
        +equals(o : Object) : boolean
        +clone() : Activity
        +calculateCalories(u : User) : int
        +isDistanceBased() : boolean
        +isAltimetryBased() : boolean
        +getAttributes() : ArrayList<String>
        +setAttributes(attributes : ArrayList<Integer>) : void 
    }

    class TrailRunning extends Activity {
        ..Attributes..
        -{static} MET_VALUE : final double
        -{static} ALTIMETRY_FACTOR : final int
        -distance : int
        -altimetry : int
        .. Constructors ..
        +TrailRunning()
        +TrailRunning(name : String, duration : int, intensity : int,
            hard : boolean, calories : int)
        +TrailRunning(name : String, duration : int, intensity : int,
        hard : boolean, calories : int, distance : int, altimetry : int)
        +TrailRunning(name : String, duration : int, intensity : int,
            hard : boolean, calories : int, attributes : ArrayList<Integer>)
        +TrailRunning(distanceAltimetry : TrailRunning)
        .. Getters ..
        +getDistance() : int
        +getAltimetry() : int
        .. Setters ..
        +setDistance(distance : int) : void
        +setAltimetry(altimetry : int) : void
        .. Others methods ..
        +toString() : String
        +equals(o : Object) : boolean
        +clone() : Activity
        +calculateCalories(u : User) : int
        +isDistanceBased() : boolean
        +isAltimetryBased() : boolean
        +getAttributes() : ArrayList<String>
        +setAttributes(attributes : ArrayList<Integer>) : void 
    }
    class BTT extends Activity {
        ..Attributes..
        -{static} MET_VALUE : final double
        -{static} ALTIMETRY_FACTOR : final int
        -distance : int
        -altimetry : int
        .. Constructors ..
        +BTT()
        +BTT(name : String, duration : int, intensity : int,
            hard : boolean, calories : int)
        +BTT(name : String, duration : int, intensity : int,
        hard : boolean, calories : int, distance : int, altimetry : int)
        +BTT(name : String, duration : int, intensity : int,
            hard : boolean, calories : int, attributes : ArrayList<Integer>)
        +BTT(distanceAltimetry : BTT)
        .. Getters ..
        +getDistance() : int
        +getAltimetry() : int
        .. Setters ..
        +setDistance(distance : int) : void
        +setAltimetry(altimetry : int) : void
        .. Others methods ..
        +toString() : String
        +equals(o : Object) : boolean
        +clone() : Activity
        +calculateCalories(u : User) : int
        +isDistanceBased() : boolean
        +isAltimetryBased() : boolean
        +getAttributes() : ArrayList<String>
        +setAttributes(attributes : ArrayList<Integer>) : void 
    }

    class RopeJumping extends Activity {
        ..Attributes..
        -{static} MET_VALUE : final double
        -repetition : int
        .. Constructors ..
        +RopeJumping()
        +RopeJumping(name : String, duration : int, intensity : int,
            hard : boolean, calories : int)
        +RopeJumping(name : String, duration : int, intensity : int,
        hard : boolean, calories : int, repetition : int)
        +RopeJumping(name : String, duration : int, intensity : int,
            hard : boolean, calories : int, attributes : ArrayList<Integer>)
        +RopeJumping(repetition : RopeJumping)
        .. Getters ..
        +getRepetition() : int
        .. Setters ..
        +setRepetition(repetition : int) : void
        .. Others methods ..
        +toString() : String
        +equals(o : Object) : boolean
        +clone() : Activity
        +calculateCalories(u : User) : int
        +getDistance() : int
        +getAltimetry() : int
        +isDistanceBased() : boolean
        +isAltimetryBased() : boolean
        +getAttributes() : ArrayList<String>
        +setAttributes(attributes : ArrayList<Integer>) : void 
    }
    class Stretching extends Activity {
        ..Attributes..
        -{static} MET_VALUE : final double
        -repetition : int
        .. Constructors ..
        +Stretching()
        +Stretching(name : String, duration : int, intensity : int,
            hard : boolean, calories : int)
        +Stretching(name : String, duration : int, intensity : int,
        hard : boolean, calories : int, repetition : int)
        +Stretching(name : String, duration : int, intensity : int,
            hard : boolean, calories : int, attributes : ArrayList<Integer>)
        +Stretching(repetition : Stretching)
        .. Getters ..
        +getRepetition() : int
        .. Setters ..
        +setRepetition(repetition : int) : void
        .. Others methods ..
        +toString() : String
        +equals(o : Object) : boolean
        +clone() : Activity
        +calculateCalories(u : User) : int
        +getDistance() : int
        +getAltimetry() : int
        +isDistanceBased() : boolean
        +isAltimetryBased() : boolean
        +getAttributes() : ArrayList<String>
        +setAttributes(attributes : ArrayList<Integer>) : void
    }

    class Weightlifiting extends Activity {
        ..Attributes..
        -{static} MET_VALUE : final double
        -repetition : int
        -weight : int
        .. Constructors ..
        +Weightlifiting()
        +Weightlifiting(name : String, duration : int, intensity : int,
            hard : boolean, calories : int)
        +Weightlifiting(name : String, duration : int, intensity : int,
        hard : boolean, calories : int, repetition : int, weight : int)
        +Weightlifiting(name : String, duration : int, intensity : int,
            hard : boolean, calories : int, attributes : ArrayList<Integer>)
        +Weightlifiting(repetitionWeight : Weightlifiting)
        .. Getters ..
        +getRepetition() : int
        +getWeight() : int
        .. Setters ..
        +setRepetition(repetition : int) : void
        +setWeight(weight : int) : void
        .. Others methods ..
        +toString() : String
        +equals(o : Object) : boolean
        +clone() : Activity
        +calculateCalories(u : User) : int
        +getDistance() : int
        +getAltimetry() : int
        +isDistanceBased() : boolean
        +isAltimetryBased() : boolean
        +getAttributes() : ArrayList<String>
        +setAttributes(attributes : ArrayList<Integer>) : void
    }
    class Pilates extends Activity {
        ..Attributes..
        -{static} MET_VALUE : final double
        -repetition : int
        -weight : int
        .. Constructors ..
        +Pilates()
        +Pilates(name : String, duration : int, intensity : int,
            hard : boolean, calories : int)
        +Pilates(name : String, duration : int, intensity : int,
        hard : boolean, calories : int, repetition : int, weight : int)
        +Pilates(name : String, duration : int, intensity : int,
            hard : boolean, calories : int, attributes : ArrayList<Integer>)
        +Pilates(repetitionWeight : Pilates)
        .. Getters ..
        +getRepetition() : int
        +getWeight() : int
        .. Setters ..
        +setRepetition(repetition : int) : void
        +setWeight(weight : int) : void
        .. Others methods ..
        +toString() : String
        +equals(o : Object) : boolean
        +clone() : Activity
        +calculateCalories(u : User) : int
        +getDistance() : int
        +getAltimetry() : int
        +isDistanceBased() : boolean
        +isAltimetryBased() : boolean
        +getAttributes() : ArrayList<String>
        +setAttributes(attributes : ArrayList<Integer>) : void
    }
}

class Plan {
    .. Attributes ..
    -name : String
    -events : ArrayList<Event>
    .. Constructors ..
    +Plan()
    +Plan(name : String, events : ArrayList<Event>)
    +Plan(plan : Plan)
    .. Getters ..
    +getName() : String
    +getEvents() : ArrayList<Event>
    .. Setters ..
    +setName(name : String) : void
    +setEvents(events : ArrayList<Event>) : void
    .. Others methods ..
    +toString() : String
    +equals(o : Object) : boolean
    +clone() : Plan
    .. Events management methods ..
    +addEvent(event : Event) : void
    +removeEvent(event : Event) : void
}

class Event {
    .. Attributes ..
    -{static} MAX_REPETITIONS : final int
    -activity : Activity
    -activityRepetitions : int
    -day : int
    -time : LocalTime
    .. Constructors ..
    +Event()
    +Event(activity : Activity, activityRepetitions : int,
        day : int, time : LocalTime)
    +Event(event : Event)
    .. Getters ..
    +getActivity() : Activity
    +getActivityRepetitions() : int
    +getDay() : int
    +getTime() : LocalTime
    .. Setters ..
    +setActivity(activity : Activity) : void
    +setActivityRepetitions(activityRepetitions : int) : void
    +setDay(day: int) : void
    +setTime(time : LocalTime) : void
    .. Others methods ..
    +toString() : String
    +equals(o : Object) : boolean
    +clone() : Event
    +isValidDay(day : int) : boolean
}

class ActivityRepetition {
    .. Attributes ..
    -activity : Activity
    -repetitionsLeft : int
    .. Constructors ..
    +ActivityRepetition()
    +ActivityRepetition(Activity activity, int repetitionsLeft)
    .. Getters ..
    +getActivity() : Activity
    +getRepetitionsLeft() : int
    .. Setter ..
    +setRepetitionsLeft(int repetitionsLeft) : void
    .. Other methods ..
    +create(ars : ArrayList<ActivityRepetition>) : ArrayList<ActivityRepetition>
    +sort(ar : ArrayList<ActivityRepetition>
          maxActivitiesPerDay : int,
          user : User) : ArrayList<ActivityRepetition>
    +create(a : ArrayList<Activity>,
            maxRepetitionPerWeek : int,
            maxActivitiesPerDay : int,
            user : User,
            isHard: boolean) : ArrayList<ActivityRepetition>
}

class ActivityPlanner {
    .. Attributes ..
    -users : HashMap<Integer, User>
    -updatedState : boolean
    -stateFilepath : String
    .. Constructor ..
    +ActivityPlanner()
    .. Setter ..
    +setStateFilepath(stateFilepath : String) : void
    .. Getters ..
    +getStateFilepath() : String
    +getUpdatedState() : boolean
    +getUsers() : HashMap<Integer, User>
    .. User management methods ..
    +getUsersSize() : int
    +getUserById(id : int) : User
    +getUserByEmail(email : String) : User
    +getNextUserId() : int
    +getUsersIds() : ArrayList<Integer>
    +getUsersEmails() : ArrayList<String>
    +addUser(user : User) : void
    +removeUser(user : User) : void
    +updateUser(user : User) : void
    +searchUser(id : int) : User
    +searchUser(email : String) : User
    +getUserTypes() : ArrayList<String>
    .. Activity management methods ..
    +getActivitiesNames(activities : ArrayList<Activity>) : ArrayList<String>
    +getActivitiesNames(u : User) : ArrayList<String>
    +getActivities() : ArrayList<String>
    +getUserActivity(activities : ArrayList<Activity>, activityName : String) : Activity
    .. Utility methods ..
    -getClasses(packageName : String) : List<Class<?>>
    .. Simulation method ..
    +runSimulation(startDate : LocalDate, endDate : LocalDate) : String
    .. Statistics methods ..
    +mostCaloriesBurned() : User
    +mostCaloriesBurned(start : LocalDate, end : LocalDate) : User
    +mostActivities() : User
    +mostActivities(start : LocalDate, end : LocalDate) : User
    +mostPracticedActivityType() : String
    +kmTraveled(user : User) : double
    +kmTraveled(user : User, start : LocalDate, end : LocalDate) : double
    +altimetryClimbed(user : User) : int
    +altimetryClimbed(user : User, start : LocalDate, end : LocalDate) : int
    +mostCaloriesBurnedPlan() : String
    +listActivities(user : User) : String
    .. State management methods ..
    +saveState() : void
    +loadState() : void
}

class Controller {
    .. Attributes ..
    -{static} MAX_TRIES : final int
    -m : ActivityPlanner
    -sc : Scanner
    .. Constructor ..
    +Controller()
    .. Menu methods ..
    +main(args : String[]) : void
    -mainMenu() : void
    -userMenu(user : User) : void
    -manageUserSubMenu() : void
    -manageUserActivitiesSubMenu() : void
    -manageUserRegisteredActivitiesSubMenu() : void
    -manageUserPlanSubMenu() : void
    -simulationSubMenu() : void
    -statisticsSubMenu() : void
    -displayStatsSubMenu() : void
    -exit() : void
    .. User IO methods ..
    -enterUserName() : String
    -enterUserEmail(emails : ArrayList<String>) : String
    -enterUserAddress() : String
    -enterUserHeartRate() : int
    -enterUserWeight() : int
    -enterUserHeight() : int
    -enterUserType(types : ArrayList<String>) : String
    -createUser(emails : ArrayList<String>, types : ArrayList<String>, id : int) : User
    -chooseHowToSearchUser() : int
    -searchUserIO() : User
    -editUser(emails: ArrayList<String>, user : User) : void
    .. Activity IO methods ..
    -createActivity(names : ArrayList<String>, activities : ArrayList<String>) : Activity
    -searchActivityIO(userActivitiesNames : ArrayList<String>) : String
    .. Register IO methods ..
    -registerActivityIO(user : User) : User
    .. Plan IO methods ..
    -createPlan(userActivities : ArrayList<Activity>) : Plan
    -createBasedOnGoalsIO(user : User) : Plan
    -createBasedOnGoals(
        user : User,
        caloriesGoal : int,
        maxActivitiesPerDay : int,
        maxDisitinctActivitiesPerDay : int,
        nActivityRepetitionPerWeek : int,
        selectedActivities : ArrayList<Activity>) : Plan
    .. Event IO methods ..
    -createEvent(activities : ArrayList<Activity>, maxRepetitions : int, day : int) : Event
    .. Simulation IO methods ..
    -getSimulationEndDate(startDate : LocalDate) : LocalDate
    .. Statistics IO methods ..
    -insertStatisticsDate(start : boolean) : LocalDate
    .. Utility static methods ..
    +{static} convertDayToString(day : int) : String
    +{static} convertTimeToString(time : LocalTime) : String
    .. simple IO methods ..
    -readString() : String
    -readInt() : int
    -readYesNo() : String
    -readDate() : LocalDate
    .. State management IO methods ..
    -saveStateIO() : void
    -loadStateIO() : void
}

note left of ActivityRepetition
    The <b>ActivityRepetition</b> class
    is used as auxiliary data structure
    to the method <i>createBasedOnGoals</i>
    located in the <b>Controller</b> class
end note

Controller -left-> ActivityRepetition : <uses>

User "1" *-- "N" Activity
User "1" *-- "1" Plan
Plan "1" *-right- "N" Event
Event "1" *-right- "1" Activity
ActivityPlanner "1" *-- "N" User
Controller -right-> ActivityPlanner : <uses>


@enduml
