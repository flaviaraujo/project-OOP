@startuml

class User {
    .. Attributes ..
    -id : int
    -name : String
    -email : String
    -address : String
    -heartRate : int
    -type : User.Type
    -activities : ArrayList<Activity>
    -registers : HashMap<LocalDateTime, Register>
    --
    .. Constructors ..
    +User()
    +User(int id, String name, String email,
        String address, int heartRate, Type type)
    +User(int id, String name, String email,
        String address, int heartRate, Type type,
        ArrayList<Activity> activities,
        HashMap<LocalDateTime, Register> registers, Plan plan)
    +User(User user)
    .. Methods - Getters ..
    +getId() : int
    +getName() : String
    +getEmail() : String
    +getAddress() : String
    +getHeartRate() : int
    +getType() : User.Type
    +getActivities() : ArrayList<Activity>
    +getRegisters() : HashMap<LocalDateTime, Register>
    +getPlan() : Plan
    .. Methods - Setters ..
    +setId(int id) : void
    +setName(String name) : void
    +setEmail(String email) : void
    +setAddress(String address) : void
    +setHeartRate(int heartRate) : void
    +setType(Type type) : void
    +setActivities(ArrayList<Activity> activities) : void
    +setRegisters(HashMap<LocalDateTime, Register> registers) : void
    +setPlan(Plan plan) : void
    .. Methods - Other ..
    +toString() : String
    +equals(Object o) : boolean
    +clone() : User
    .. Methods - Manage Users ..
    +{static} create(Scanner sc, ArrayList<User> users) : User
    +{static} search(Scanner sc, ArrayList<User> users) : User
    +{static} view(Scanner sc, ArrayList<User> users) : void
    +{static} delete(Scanner sc, ArrayList<User> users) : void
    .. Methods - Activities ..
    +addActivity(Activity activity) : void
    +deleteActivity(Activity activity) : void
    .. Methods - Registers ..
    +registerActivity(LocalDateTime date, Register register) : void
    +viewRegisters(LocalDateTime date, Register register) : void
}

enum User.Type {
    OCCASIONAL(40),
    AMATEUR(60),
    PROFESSIONAL(90)
    --
    .. Attribute ..
    -nutritionMultiplier : int
    .. Getter ..
    +getNutritionMultiplier() : int
}

class Register {
    .. Attributes ..
    -activity : Activity
    -caloriesBurned : int
    --
    .. Constructors ..
    +Register()
    +Register(Activity activity, User user)
    +Register(Activity activity, int caloriesBurned)
    +Register(Register register)
    .. Methods - Getters ..
    +getActivity() : Activity
    +getCaloriesBurned() : int
    .. Methods - Setters ..
    +setActivity(Activity activity) : void
    +setCaloriesBurned(int caloriesBurned) : void
    .. Methods - Others ..
    +toString() : String
    +equals(Object o) : boolean
    +clone() : Register
}

abstract class Activity {
    .. Attributes ..
    #name : String
    #duration : int
    #intensity : int
    --
    .. Constructors ..
    +Activity()
    +Activity(String name, int duration, int intensity)
    +Activity(Activity activity)
    .. Methods - Getters ..
    +{abstract} getACTIVITY_TYPE() : int
    +getName() : String
    +getDuration() : int
    +getIntensity() : int
    .. Methods - Setters ..
    +setName(String name) : void
    +setDuration(int duration) : void
    +setIntensity(int intensity) : void
    .. Methods - Others ..
    +{abstract} toString() : String
    +{abstract} equals(Object o) : boolean
    +{abstract} clone() : Activity
    +{abstract} caloriesBurned(User u) : int
    .. Methods - Activity Type ..
    +isDistance() : boolean
    +isDistanceAltimetry() : boolean
    +isRepetition() : boolean
    +isRepetitionWeight() : boolean
    .. Methods - Manage Activities ..
    +{abstract} create(Scanner sc, ArrayList<Activity> userActivities) : Activity
    +{static} createAux(Scanner sc, ArrayList<Activity> userActivities, int activityType) : Activity
    +{static} createMenu(Scanner sc, ArrayList<Activity> userActivities) : Activity
    +{static} searchActivity(Scanner sc, ArrayList<Activity> userActivities) : Activity
}

package activities {
    class Distance extends Activity {
        .. Attributes ..
        -{static} final ACTIVITY_TYPE : int = 1
        -distance : int
        --
        .. Constructors ..
        +Distance()
        +Distance(String name, int duration, int intensity)
        +Distance(String name, int duration, int intensity,
            int distance)
        +Distance(Distance distance)
        .. Methods - Getters ..
        +{final} getACTIVITY_TYPE() : int
        +getDistance() : int
        .. Methods - Setters ..
        +setDistance(int distance) : void
        .. Methods - Others ..
        +toString() : String
        +equals(Object o) : boolean
        +clone() : Distance
        +caloriesBurned(User u) : int
        +create(Scanner sc, ArrayList<Activity> userActivities) : Activity
    }
    
    class DistanceAltimetry extends Activity {
        .. Attributes ..
        -{static} final ACTIVITY_TYPE : int = 2
        -distance : int
        -altimetry : int
        --
        .. Constructors ..
        +DistanceAltimetry()
        +DistanceAltimetry(String name, int duration, int intensity)
        +DistanceAltimetry(String name, int duration, int intensity,
            int distance, int altimetry)
        +DistanceAltimetry(DistanceAltimetry distanceAltimetry)
        .. Methods - Getters ..
        +{final} getACTIVITY_TYPE() : int
        +getDistance() : int
        +getAltimetry() : int
        .. Methods - Setters ..
        +setDistance(int distance) : void
        +setAltimetry(int altimetry) : void
        .. Methods - Others ..
        +toString() : String
        +equals(Object o) : boolean
        +clone() : DistanceAltimetry
        +caloriesBurned(User u) : int
        +create(Scanner sc, ArrayList<Activity> userActivities) : Activity
    }
    
    class Repetition extends Activity {
        .. Attributes ..
        -{static} final ACTIVITY_TYPE : int = 3
        -repetition : int
        --
        .. Constructors ..
        +Repetition()
        +Repetition(String name, int duration, int intensity)
        +Repetition(String name, int duration, int intensity,
            int repetition)
        +Repetition(Repetition repetition)
        .. Methods - Getters ..
        +{final} getACTIVITY_TYPE() : int
        +getRepetition() : int
        .. Methods - Setters ..
        +setRepetition(int repetition) : void
        .. Methods - Others ..
        +toString() : String
        +equals(Object o) : boolean
        +clone() : Repetition
        +caloriesBurned(User u) : int
        +create(Scanner sc, ArrayList<Activity> userActivities) : Activity
    }
    
    class RepetitionWeight extends Activity {
        .. Attributes ..
        -{static} final ACTIVITY_TYPE : int = 4
        -repetition : int
        -weight : int
        --
        .. Constructors ..
        +RepetitionWeight()
        +RepetitionWeight(String name, int duration, int intensity)
        +RepetitionWeight(String name, int duration, int intensity,
            int repetition, int weight)
        +RepetitionWeight(RepetitionWeight repetitionWeight)
        .. Methods - Getters ..
        +{final} getACTIVITY_TYPE() : int
        +getRepetition() : int
        +getWeight() : int
        .. Methods - Setters ..
        +setRepetition(int repetition) : void
        +setWeight(int weight) : void
        .. Methods - Others ..
        +toString() : String
        +equals(Object o) : boolean
        +clone() : RepetitionWeight
        +caloriesBurned(User u) : int
        +create(Scanner sc, ArrayList<Activity> userActivities) : Activity
    }
}

class Plan {
    .. Attributes ..
    -name : String
    -events : ArrayList<Event>
    --
    .. Constructors ..
    +Plan()
    +Plan(String name, ArrayList<Event> events)
    +Plan(Plan plan)
    .. Methods - Getters ..
    +getName() : String
    +getEvents() : ArrayList<Event>
    .. Methods - Setters ..
    +setName(String name) : void
    +setEvents(ArrayList<Event> events) : void
    .. Methods - Others ..
    +toString() : String
    +equals(Object o) : boolean
    +clone() : Plan
    +addEvent(Event event) : void
    +deleteEvent(Event event) : void
    +create(Scanner sc, ArrayList<Activity> userActivities,
        int maxRepetitions) : Plan
}


class Event {
    .. Attributes ..
    -{static} final MAX_REPETITIONS : int = 3
    -activity : Activity
    -activityRepetitions : int
    -day : int
    -time : LocalTime
    --
    .. Constructors ..
    +Event()
    +Event(Activity activity, int activityRepetitions, int day,
        LocalTime time)
    +Event(Event event)
    .. Methods - Getters ..
    +{final} getMAX_REPETITIONS() : int
    +getActivity() : Activity
    +getActivityRepetitions() : int
    +getDay() : int
    +getTime() : LocalTime
    .. Methods - Setters ..
    +setActivity(Activity activity) : void
    +setActivityRepetitions(int activityRepetitions) : void
    +setDay(int day) : void
    +setTime(LocalTime time) : void
    .. Methods - Others ..
    +toString() : String
    +equals(Object o) : boolean
    +clone() : Event
    +convertDayToString(int day) : String
    +convertTimeToString(LocalTime time) : String
    +isValidDay(int day) : boolean
    +create(Scanner sc, ArrayList<Activity> userActivities,
        int maxRepetitions) : Event
}

class Stats {
    .. Statistics Methods ..
    +mostCaloriesBurned(ArrayList<User> users) : User
    +mostCaloriesBurned(ArrayList<User> users, LocalDate start, LocalDate end) : User
    +mostActivities(ArrayList<User> users) : User
    +mostActivities(ArrayList<User> users, LocalDate start, LocalDate end) : User
    +mostPracticedActivityType(ArrayList<User> users) : String
    +kmTraveled(User user) : double
    +kmTraveled(User user, LocalDate start, LocalDate end) : double
    +altimetryClimbed(User user) : int
    +altimetryClimbed(User user, LocalDate start, LocalDate end) : int
    +mostCaloriesBurnedPlan(ArrayList<User> users) : Plan
    --
    .. Statistics Menu Methods ..
    +displayStatsMenu() : void
    +displayStatsMenu2() : void
    +insertStartDate(Scanner sc) : LocalDate
    +insertEndDate(Scanner sc) : LocalDate
    +statsMenu(Scanner sc, ArrayList<User> users) : void
}

class Main {
    .. Attributes ..
    -updatedState : boolean
    -users : ArrayList<User>
    --
    .. Methods ..
    +{static} main(String args[]) : void
    -{static} mainMenu(Scanner scanner, String stateFilepath, Main m) : void
    -{static} saveState(String stateFilepath, Main m) : void
    -{static} loadState(String stateFilepath, Main m, Scanner sc) : void
    --
    TODO
}

User <|- User.Type
User "1" *-- "N" Activity
User "1" *-- "N" Register
User "1" *-- "1" Plan
Plan "1" *-- "N" Event
Main "1" *-- "N" User
Main --> Activity : uses
Main --> Plan : uses
Main --> Stats : uses

@enduml
