@startuml

class User {
    .. Attributes ..
    -id : int
    -name : String
    -email : String
    -address : String
    -heartRate : int
    -type : User.Type
    -activities : ArrayList<Activity>
    -registers : HashMap<LocalDateTime, Register>
    --
    .. Constructors ..
    +User()
    +User(int id, String name, String email,
        String address, int heartRate, Type type)
    +User(int id, String name, String email,
        String address, int heartRate, Type type,
        ArrayList<Activity> activities,
        HashMap<LocalDateTime, Register> registers)
    +User(User user)
    .. Methods - Getters ..
    +getId() : int
    +getName() : String
    +getEmail() : String
    +getAddress() : String
    +getHeartRate() : int
    +getType() : User.Type
    +getActivities() : ArrayList<Activity>
    +getRegisters() : HashMap<LocalDateTime, Register>
    .. Methods - Setters ..
    +setId(int id) : void
    +setName(String name) : void
    +setEmail(String email) : void
    +setAddress(String address) : void
    +setHeartRate(int heartRate) : void
    +setType(Type type) : void
    +setActivities(ArrayList<Activity> activities) : void
    +setRegisters(HashMap<LocalDateTime, Register> registers) : void
    .. Methods - Other ..
    +toString() : String
    +equals(Object o) : boolean
    +clone() : User
    .. Methods - Manage Users ..
    +{static} create(Scanner sc, ArrayList<User> users) : User
    -{static} search(Scanner sc, ArrayList<User> users) : User
    +{static} view(Scanner sc, ArrayList<User> users) : void
    +{static} delete(Scanner sc, ArrayList<User> users) : void
    .. Methods - Activities ..
    +addActivity(Activity activity) : void
    +deleteActivity(Activity activity) : void
    .. Methods - Registers ..
    +registerActivity(LocalDateTime date, Register register) : void
    +viewRegisters(LocalDateTime date, Register register) : void
}

enum User.Type {
    OCCASIONAL(40),
    AMATEUR(60),
    PROFESSIONAL(90)
    --
    .. Attribute ..
    -nutritionMultiplier : int
    .. Getter ..
    +getNutritionMultiplier() : int
}

class Register {
    .. Attributes ..
    -activity : Activity
    -caloriesBurned : int
    --
    .. Constructors ..
    +Register()
    +Register(Activity activity, User user)
    +Register(Activity activity, int caloriesBurned)
    +Register(Register register)
    .. Methods - Getters ..
    +getActivity() : Activity
    +getCaloriesBurned() : int
    .. Methods - Setters ..
    +setActivity(Activity activity) : void
    +setCaloriesBurned(int caloriesBurned) : void
    .. Methods - Others ..
    +toString() : String
    +equals(Object o) : boolean
    +clone() : Register
}

class Activity {
    .. Attributes ..
    -duration : int
    -intensity : int
    --
    .. Constructors ..
    +Activity()
    +Activity(int duration, int intensity)
    +Activity(Activity activity)
    .. Methods - Getters ..
    +getDuration() : int
    +getIntensity() : int
    .. Methods - Setters ..
    +setDuration(int duration) : void
    +setIntensity(int intensity) : void
    // TODO this class is a superclass
    // TODO add subclasses
}

class Plan {
    // TODO: attributes and methods
}

class Event {
    // TODO: attributes and methods
}

class Stats {
    // TODO: methods for statistics calculation
    .. Statistics methods ..
}

class Main {
    .. Attributes ..
    -updatedState : boolean
    -users : ArrayList<User>
    --
    .. Methods ..
    +{static} main(String args[]) : void
    -{static} mainMenu(Scanner scanner, String stateFilepath, Main m) : void
    -{static} saveState(String stateFilepath, Main m) : void
    -{static} loadState(String stateFilepath, Main m, Scanner sc) : void
    --
    TODO
}

Register *-- User
User <|-- User.Type
User *-- Plan
Event *-- Plan
Activity *-- Event
Register *-- Activity
Main *-- User
Main *-- Activity
Main *-- Plan
Main *-- Stats

@enduml
