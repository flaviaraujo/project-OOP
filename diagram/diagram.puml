@startuml

class User {
    .. Attributes ..
    -id : int
    -name : String
    -email : String
    -address : String
    -heartRate : int
    -type : User.Type
    --
    .. Constructors ..
    +User()
    +User(int id, String name, String email,
        String address, int heartRate, Type type)
    +User(User user)
    .. Methods - Getters ..
    +getId() : int
    +getName() : String
    +getEmail() : String
    +getAddress() : String
    +getHeartRate() : int
    +getType() : User.Type
    .. Methods - Setters ..
    +setId(int id) : void
    +setName(String name) : void
    +setEmail(String email) : void
    +setAddress(String address) : void
    +setHeartRate(int heartRate) : void
    +setType(Type type) : void
    .. Methods - Other ..
    +toString() : String
    +equals(Object o) : boolean
    +clone() : User
    +view() : void
    +{static} create(Scanner sc, ArrayList<User> users) : User
    -{static} search(Scanner sc, ArrayList<User> users) : User
    +{static} view(Scanner sc, ArrayList<User> users) : void
    +{static} delete(Scanner sc, ArrayList<User> users) : void
}

enum User.Type {
    // TODO
}

class Activity {
    // attributes and methods
}

enum Activity.Type {
    // TODO
}

class Plan {
    // attributes and methods
}

class Stats {
    // methods
}

class Main {
    .. Attributes ..
    -updatedState : boolean
    -users : ArrayList<User>
    --
    .. Methods ..
    +{static} main(String args[]) : void
    -{static} mainMenu(Scanner scanner, String stateFilepath, Main m) : void
    -{static} saveState(String stateFilepath, Main m) : void
    -{static} loadState(String stateFilepath, Main m, Scanner sc) : void
}

User *-- Plan
Plan *-- Activity
Main *-- User
Main *-- Activity
Main *-- Plan

@enduml
